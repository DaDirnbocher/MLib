apply plugin: 'java'
apply plugin: 'maven'
apply from: "${project.rootDir}/gradle/eclipse.gradle"
import java.nio.file.Files

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'de.mediathekview'
version = '2.1.1'

compileJava {
    options.encoding = "UTF-8"
    options.compilerArgs = ['-Xlint:all']
}

compileTestJava {
    options.encoding = "UTF-8"
    options.compilerArgs = ['-Xlint:all']
}

repositories {
    mavenLocal()
    maven {
        url "https://repo.mediathekview.de/repository/maven-public/"
    }
}

uploadArchives {
    repositories.mavenDeployer {

        repository(url: "https://repo.mediathekview.de/repository/maven-releases/") {
            authentication(userName:  nexusUser, password:  nexusPw)
        }
        snapshotRepository(url: "https://repo.mediathekview.de/repository/maven-snapshots/") {
            authentication(userName:  nexusUser, password:  nexusPw)
        }
    }
}
build.dependsOn(install)

dependencies {
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'com.fasterxml.jackson.core:jackson-core:2.7.0'
    compile 'com.jidesoft:jide-oss:3.6.16'
    compile 'org.tukaani:xz:1.5'
}

ext {
    propsFile = file('src/main/resources/version.properties').absoluteFile
    if (!propsFile.exists()) {
        Files.createFile(propsFile.toPath())
    }
}

def loadVersionProperties() {
    Properties props = new Properties()
    props.load(propsFile.newDataInputStream())
    return props
}

task updateVersion << {
    Properties props = loadVersionProperties()
    def oldVersion = props.getProperty('VERSION')
    if (!oldVersion.equals(project.version)) {
        logger.lifecycle "==msearch======================"
        logger.lifecycle "Version: $project.version"
        logger.lifecycle "==msearch======================"
        props.setProperty('VERSION', project.version)
        props.store(propsFile.newWriter(), null)
    }
}
processResources.dependsOn updateVersion

/**
 * <b>You don't have to call this. Travis will do it for you if a new releass (tag) will be build!<b/>
 * Call this so: './gradlew build release -PnexusUser=[NEXUS_USER] -PnexusPw=[NEXUS_PASSWORD]'
 */
task release(dependsOn: 'uploadArchives') {
    doLast {
        println 'Released Version '+version
    }
}

/**
 * <b>You don't have to call this. Travis will do it for you if you push to develop!<b/>
 * Call this so: './gradlew build releaseSnapshot -PnexusUser=[NEXUS_USER] -PnexusPw=[NEXUS_PASSWORD]'
 */
task releaseSnapshot(dependsOn: 'uploadArchives') {
    doLast {
        println 'Released Snapshot Version '+version
    }
}

gradle.taskGraph.whenReady {taskGraph ->
    if (!taskGraph.hasTask(release)) {
        version = version+'-SNAPSHOT'
    }
}